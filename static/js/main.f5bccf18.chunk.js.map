{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/statistics.js","components/FeedbackOptions/constans.js","components/App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Notification","message","Statistics","good","bad","neutral","total","positivePercantage","FEEDBACK_OPTIONS","App","useState","setGood","setNeutral","setBad","positiveFeedbackPercentage","Math","floor","prevGood","prevNeutral","prevBad","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAmBeA,EAhBC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,oCACI,6BAAKD,IACJC,MCiBEC,EArBS,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,gBAAX,OACpB,mCACKD,EAAQE,KAAI,SAAAC,GAAM,OACf,wBAEIH,QAASA,EACTI,KAAK,SACLC,QAAS,kBAAMJ,EAAgBE,IAJnC,SAOKA,GANIA,SCGNG,EAPM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KC0B3BC,EAzBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,IAAKC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC7C,OACI,qCACKD,EAAQ,GACL,+BACI,wCAAWH,KACX,2CAAcE,KACd,uCAAUD,KACV,yCAAYE,KACZ,uDAA0BC,EAA1B,WAGG,IAAVD,GAAe,cAAC,EAAD,CAAcL,QAAQ,0BChBrCO,G,MAAmB,CAAC,OAAQ,UAAU,QCQpC,SAASC,IAEpB,MAA0BC,mBAAS,GAAnC,mBAAQP,EAAR,KAAcQ,EAAd,KACA,EAAgCD,mBAAS,GAAzC,mBAAQL,EAAR,KAAiBO,EAAjB,KACA,EAAwBF,mBAAS,GAAjC,mBAAQN,EAAR,KAAaS,EAAb,KAmBMP,EAAQD,EAAUF,EAAOC,EACzBU,EAA6BC,KAAKC,MAAOb,EAAOG,EAAS,KAK/D,OACI,eAAC,WAAD,WACI,cAAC,EAAD,CAASf,MAAM,wBAAf,SACI,cAAC,EAAD,CAAiBG,QAASc,EAAkBb,gBA1BjC,SAAAD,GAEnB,OAAQA,GACJ,IAAK,OACDiB,GAAQ,SAAAM,GAAQ,OAAIA,EAAW,KAC/B,MACJ,IAAK,UACDL,GAAW,SAAAM,GAAW,OAAIA,EAAc,KACxC,MACJ,IAAK,MACDL,GAAO,SAAAM,GAAO,OAAIA,EAAU,KAC5B,MACJ,QACI,aAeJ,cAAC,EAAD,CAAS5B,MAAM,aAAf,SACKe,EAAQ,EAEL,cAAC,EAAD,CACAH,KAAMA,EACNE,QAASA,EACTD,IAAKA,EACLE,MAAOA,EACPC,mBAAoBO,IAIpB,cAAC,EAAD,CAAcb,QAAQ,2BClD1CmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACb,EAAD,MAEFc,SAASC,eAAe,W","file":"static/js/main.f5bccf18.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <section>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </section>\r\n    )\r\n    \r\n      \r\n    \r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.object.isRequired,\r\n}\r\nexport default Section","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({options, onLeaveFeedback})=>(\r\n    <>\r\n        {options.map(option=>(\r\n            <button \r\n                key={option} \r\n                options={options}\r\n                type=\"button\" \r\n                onClick={() => onLeaveFeedback(option)}\r\n                \r\n            >\r\n                {option}\r\n            </button>\r\n        ))}\r\n    </>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>\r\n\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Notification from '../Notification';\r\n\r\nconst Statistics = ({ good, bad, neutral, total, positivePercantage }) => {\r\n    return (\r\n        <>\r\n            {total > 0 && (\r\n                <ul>\r\n                    <li>Good: {good}</li>\r\n                    <li>Neutral: {neutral}</li>\r\n                    <li>Bad: {bad}</li>\r\n                    <li>Total: {total}</li>\r\n                    <li>Positive Percentage: {positivePercantage} %</li>\r\n                </ul>\r\n            )}\r\n            {total === 0 && <Notification message='No Feedback given'/>}\r\n        </>\r\n    )\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercantage: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Statistics","export const FEEDBACK_OPTIONS = ['good', 'neutral','bad']","import { Fragment, useState } from 'react';\nimport Section from './Section';\nimport FeedbackOptions from './FeedbackOptions';\nimport Statistics from './Statistics';\nimport Notification from './Notification';\nimport styles from './App.module.css'\nimport { FEEDBACK_OPTIONS } from './FeedbackOptions/constans';\n\nexport default function App() {\n\n    const [ good, setGood ] = useState(0);\n    const [ neutral, setNeutral ] = useState(0);\n    const [ bad, setBad ] = useState(0);\n    \n    const handleFeedback = options => {\n\n        switch (options) {\n            case 'good':\n                setGood(prevGood => prevGood + 1);\n                break;\n            case 'neutral':\n                setNeutral(prevNeutral => prevNeutral + 1);\n                break;\n            case 'bad':\n                setBad(prevBad => prevBad + 1);\n                break;\n            default:\n                return;\n            \n        }\n    };\n    const total = neutral + good + bad;\n    const positiveFeedbackPercentage = Math.floor((good / total) * 100);\n\n    // const { good, neutral, bad } = this.state\n    // const total = this.countTotalFeedback()\n    // const positivePercantage = this.countPositivePercantage()\n    return (\n        <Fragment>\n            <Section title='Please leave feedback'>\n                <FeedbackOptions options={FEEDBACK_OPTIONS} onLeaveFeedback={handleFeedback} />\n            </Section>\n            <Section title='Statistics'>\n                {total > 0 ? (\n\n                    <Statistics\n                    good={good}\n                    neutral={neutral}\n                    bad={bad}\n                    total={total}\n                    positivePercantage={positiveFeedbackPercentage}\n                    />\n                    \n                ) : (\n                    <Notification message='No Feedback given'/>\n                        \n                )}\n                \n            </Section>\n        </Fragment>\n    )\n}\n\n\n\n\n\n\n\n\n\n//     state = {\n//         good: 0,\n//         neutral: 0,\n//         bad: 0\n//     };\n\n//     handleFeedback = e => {\n//     const name = e.target.name;\n//     this.setState(state => ({\n//       ...state,\n//       [name]: this.state[name] + 1\n//     }));\n//   };\n\n//     countTotalFeedback = () => {\n//         const { good, neutral, bad } = this.state\n//         return good + neutral + bad\n//     }\n//     countPositivePercantage = () => {\n//         const { good } = this.state;\n//         const total = this.countTotalFeedback()\n//         return total ? Math.round((good/total) * 100) : 0\n//     }\n\n    // render() {\n    //     const { good, neutral, bad } = this.state\n    //     const total = this.countTotalFeedback()\n    //     const positivePercantage = this.countPositivePercantage()\n    //     return (\n    //         <div>\n    //         <Section title='Please leave feedback'>\n    //             <FeedbackOptions options={FEEDBACK_OPTIONS} onLeaveFeedback={ this.handleFeedback}/>   \n    //         </Section>\n    //         <Section title='Statistics'>\n    //             <Statistics\n    //                 good={good}\n    //                 neutral={neutral}\n    //                 bad={bad}\n    //                 total={total}\n    //                 positivePercantage={positivePercantage}\n    //             />\n    //         </Section>\n    //         </div>\n    //     )\n    // }\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}